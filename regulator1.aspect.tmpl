/*
 * Copyright (c) 2014-2016 ISPRAS (http://www.ispras.ru)
 * Institute for System Programming of the Russian Academy of Sciences
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * ee the License for the specific language governing permissions and
 * limitations under the License.
 */

before: file ("$this")
{
struct regulator;

// for arg_sign in regulator1_arg_signs
extern void ldv_regulator_enable{{ arg_sign.id }}(void);
extern void ldv_regulator_disable{{ arg_sign.id }}(void);
extern void ldv_regulator_disable_deferred{{ arg_sign.id }}(void);
extern void ldv_regulator_force_disable{{ arg_sign.id }}(void);
extern void ldv_regulator_put{{ arg_sign.id }}(void);
// endfor
}

around: call(int regulator_enable(struct regulator *regulator))
{
	return ldv_regulator_enable_$arg_sign1();
}

around: call(void regulator_disable(struct regulator *regulator))
{
	ldv_regulator_disable_$arg_sign1();
}

around: call(void regulator_force_disable(struct regulator *regulator))
{
	ldv_regulator_force_disable_$arg_sign1();
}

around: call(void regulator_disable_deferred(struct regulator *regulator, int ms))
{
	ldv_regulator_disable_deferred_$arg_sign1();
}

around: call(void regulator_put(struct regulator *regulator))
{
	ldv_regulator_put_$arg_sign1();
}
